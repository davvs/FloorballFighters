<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
 xmlns:sec="http://www.springframework.org/schema/security"
 xmlns:context="http://www.springframework.org/schema/context"
 xsi:schemaLocation="
http://www.springframework.org/schema/security
http://www.springframework.org/schema/security/spring-security-3.1.xsd
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-3.2.xsd">

 <!-- 
	 The <http> block states that we want to use web security (which is applied by Spring Security's filters), with form-based login and access control expressions enabled.
	 
	 entry-point-ref attribute defines a customized AuthenticationEntryPoint to be set. Here default entry point refers login.do which directs the user to login.jsp
	 
	 The first <intercept-url> element says that the login url ("/login.do") is accessible to anyone (the "permitAll" expression).
	 
	 The second <intercept-url> elements says that in order to access any url starting with '/jsp', user needs to be authenticated.
	 If user is not authenticated and it tries to open such url directly, he/she will be redirected to entry point i.e. login page.
	 You can define all such url patterns (one per <intercept-url> element) for which authentication is required 
  -->
  
    <http pattern="/static/**" security="none" />
    
  	<http use-expressions="true" auto-config="false" entry-point-ref="loginUrlAuthenticationEntryPoint" disable-url-rewriting="true">
<!-- 		<intercept-url pattern="/user/login" access="permitAll"/> -->
<!-- 		<intercept-url pattern="/favicon.png" access="permitAll"/> -->

<!-- 		<intercept-url pattern="/day/**" access="isAuthenticated()"/> -->
<!-- 		<intercept-url pattern="/game/**" access="isAuthenticated()"/> -->
<!-- 		<intercept-url pattern="/user/**" access="isAuthenticated()"/> -->
		
<!-- 		<intercept-url pattern="/" access="isAuthenticated()"/> -->

<!-- 		<intercept-url pattern="/**" access="denyAll" /> -->
		<intercept-url pattern="/**" access="permitAll" />
  
		<logout logout-url="/logout" delete-cookies="JSESSIONID"/>
 		<custom-filter position="FORM_LOGIN_FILTER" ref="usernamePasswordAuthenticationFilter"/>
<!--  		<custom-filter after="CONCURRENT_SESSION_FILTER" ref="CSRFSecurityFilter" /> -->
	</http>

<!-- 	<beans:bean id="CSRFSecurityFilter" class="se.davvs.floorballfighters.csrf.CSRFSecurityFilter" /> -->

    <beans:bean name="usernamePasswordAuthenticationFilter" class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
         <beans:property name="authenticationManager" ref="authenticationManager" />
		 <beans:property name="authenticationFailureHandler" ref="failureHandler" />
		 <beans:property name="authenticationSuccessHandler" ref="successHandler" />
    </beans:bean>

	<beans:bean id="successHandler" class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
	   <beans:property name="defaultTargetUrl" value="/" />
	</beans:bean>

	<beans:bean id="failureHandler" class="org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler">
	    <beans:property name="defaultFailureUrl" value="/user/login?error=generic"/>
		<beans:property name="exceptionMappings">
	        <beans:props>
	            <beans:prop key="se.davvs.floorballfighters.authorization.AccessRoleMissingException">/user/login?error=role</beans:prop>
	        </beans:props>
	    </beans:property>
	</beans:bean>

	<beans:bean id="loginUrlAuthenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
	   <beans:constructor-arg name="loginFormUrl" value="/user/login"/>
	</beans:bean>
 
  <!--  To enable core configuration -->
  <context:annotation-config/>
  <context:component-scan base-package="se.davvs.configuration"/>

 <!-- 
	 The <authentication-manager> element is being used here to define a list of in-memory users and their passwords and role information, which is convenient for samples and demos.
	 A real world application would more likely use a database, LDAP server or some single sign-on integration.
   -->
   
 <authentication-manager alias="authenticationManager">
    <authentication-provider ref='AuthProvider'/>
 </authentication-manager>
 
 <beans:bean id="AuthProvider" class="se.davvs.floorballfighters.authorization.AuthProvider">
 </beans:bean>
 
 <!-- 
 <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
 	location="/WEB-INF/adminweb.properties">
 </bean>
  -->
 
 <!-- 
 	authenticationSuccessHandler property declares a url which user is directed to upon successful authentication.
  -->
 <beans:bean id="authenticationSuccessHandler"
  class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
 </beans:bean>
</beans:beans>